#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var bignum = require('bignum');
var EncFile = require('bitcore/util/EncFile');
var timeUtil = require('bitcore/util/time');
var coinUtil = require('bitcore/util/util');
var Transaction = require('bitcore/lib/Transaction');
var Parser = require('bitcore/util/BinaryParser');
var jrpcServer = require('../jrpcServer');
var kvfile = require('../kvfile');
var winston = require('winston');
var RpcClient = require('bitcore/lib/RpcClient');
var Script = require('bitcore/lib/Script');
var Address = require('bitcore/lib/Address');
var Wallet = require('bitcore/lib/Wallet');
var WalletKey = require('bitcore/lib/WalletKey');
var KeyModule = require('bitcore/lib/Key');
var buffertools = require('buffertools');

var VERSION = '0.0.1';
var ENC_METHOD = 'aes-256-cbc';

program
	.version(VERSION)
	.option('--init', 'Initialize database')
	.option('-c, --config <file>', 'key=value configuration file')
	.option('--livenet', 'Use livenet (default: testnet)')
	.parse(process.argv);

var logger = new (winston.Logger)({
	transports: [
		new (winston.transports.Console)({ timestamp: true }),
	],
});
var cfg_fn = program.config || 'serverd.cfg';
var cfg = kvfile.readSync(cfg_fn);
if (cfg.log) {
	logger.add(winston.transports.File, { 
		filename: cfg.log,
		timestamps: true,
	});
}

// load global configuration
var db_fn = cfg.db || 'serverd.db';
var sslkey_fn = cfg.ssl_key || 'server.key';
var sslcert_fn = cfg.ssl_cert || 'server.cert';
var walletdb_fn = cfg.wallet || 'server.wallet';
var timelock_min = parseInt(cfg.timelock_min) || 3600;
var timelock_max = parseInt(cfg.timelock_max) || (3600 * 24 * 7);
var timelock_prefer = parseInt(cfg.timelock_prefer) || (3600 * 24);

// Empty wallet defaults
var wallet = new Wallet();
wallet.datastore.client = 'serverd';
wallet.datastore.client_version = VERSION;
wallet.datastore.network = 'testnet';

var httpsrv = undefined;
var admsrv = undefined;
var db = undefined;
var rpc = undefined;
var network = undefined;

function stop_all()
{
	if (httpsrv) {
		httpsrv.close();
	}
	if (admsrv) {
		admsrv.close();
	}
}

function dbWriteSync()
{
	var tmpFn = db_fn + ".tmp";
	EncFile.writeJFileSync(ENC_METHOD, process.env.SERVERD, tmpFn, db);
	fs.renameSync(tmpFn, db_fn);

	try {
		wallet.writeSync(walletdb_fn, process.env.SERVERD);
	} catch(e) {
		console.error("Failed to write wallet: " + e);
	}
}

function decodeHexTx(hexStr)
{
	var reHex = /^[0-9a-zA-Z]+$/;
	if (!reHex.test(hexStr)) {
		return undefined;
	}
	if ((hexStr.length % 2) == 1) {
		return undefined;
	}

	var txbuf = new Buffer(hexStr, 'hex');
	var tx = new Transaction();
	tx.parse(txbuf);

	return tx;
}

function decodePubkey(hexStr)
{
	var buf = new Buffer(hexStr, 'hex');
	if (!buf) {
		return undefined;
	}
	var key = new KeyModule.Key();
	key.public = buf;

	return key;
}

function loadChannelKey(channelIdStr)
{
	var channelAddr = new Address(channelIdStr);
	var keyObj = wallet.findKeyHash(channelAddr.payload());
	if (!keyObj) {
		return undefined;
	}

	var key = new WalletKey({network: network});
	key.fromObj(keyObj);

	return key.privKey;
}

function cmdChannelOpen(req)
{
	// generate a new public key
	var newKey = new WalletKey({network: network});
	newKey.generate();

	// add to wallet
	var obj = newKey.storeObj();
	wallet.addKey(obj);

	var birthday = obj.created;

	// derive channel id (aka bitcoin address) from new key
	var channelId = obj.addr;
	db.channels[channelId] = {
		id: channelId,
		created: birthday,
		state: 'open',
		remotePubkey: '',
		refundTx: '',
	};

	// flush wallet, db updates
	dbWriteSync();

	var result = {
		"channel.id": obj.addr,
		"pubkey": obj.pub,
		"timelock.min": birthday + timelock_min,
		"timelock.max": birthday + timelock_max,
		"timelock.prefer": birthday + timelock_prefer,
	};
	return jrpcServer.ok(req, result);
}

function validRefundTx(channel, tx)
{
	// must be within permitted time window
	var birthday = channel.created;
	var lock_time_min = birthday + timelock_min;
	var lock_time_max = birthday + timelock_max;
	if ((tx.lock_time < lock_time_min) ||
	    (tx.lock_time > lock_time_max)) {
		return false;
	}

	// any number of inputs or outputs
	if ((tx.ins.length < 1) || (tx.outs.length < 1)) {
		return false;
	}

	return true;
}

function cmdChannelSetRefund(req)
{
	// load and validate params
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('pubkey' in params) ||
	    !('tx' in params) ||
	    !('txInIdx' in params)) {
		return jrpcServer.err(req, -10, 'missing params');
	}

	var channelId = params["channel.id"];
	var channel = db.channels[channelId];
	if (!channel) {
		return jrpcServer.err(req, -10, 'invalid channel id');
	}
	if (channel.state != 'open') {
		return jrpcServer.err(req, -12, 'invalid channel state');
	}
	var channelKey = loadChannelKey(channel.id);
	if (!channelKey) {
		return jrpcServer.err(req, -22, 'internal server error');
	}

	var remotePubkey = decodePubkey(params.pubkey);
	if (!remotePubkey) {
		return jrpcServer.err(req, -16, 'invalid pubkey');
	}

	var tx = decodeHexTx(params.tx);
	if (!tx) {
		return jrpcServer.err(req, -15, 'transaction decode failed');
	}
	if (!validRefundTx(channel, tx)) {
		return jrpcServer.err(req, -21, 'invalid refund transaction');
	}
	
	var inIdx = parseInt(params.txInIdx);
	if ((inIdx == NaN) || (inIdx < 0) || (inIdx >= tx.ins.length)) {
		return jrpcServer.err(req, -21,
				      'invalid TX input ' + inIdx.toString());
	}

	// build scriptPubKey according to standard protocol
	var k1 = remotePubkey.public;
	var k2 = channelKey.public;
	var scriptPubKey = Script.createMultisig(2, [k1, k2]);
	scriptPubKey.updateBuffer();

	// sign T1, paying to T2, without having ever seen T1
	var txSigHash = tx.hashForSignature(scriptPubKey, inIdx,
					    Transaction.SIGHASH_ALL);
	var sigRaw = channelKey.signSync(txSigHash);
	var sigType = new Buffer(1);
	sigType[0] = Transaction.SIGHASH_ALL;
	var sig = Buffer.concat([sigRaw, sigType]);
	var sigHex = buffertools.toHex(sig);

	// update database
	var msigAddrStr = wallet.addScript(scriptPubKey);
	channel.msigAddr = msigAddrStr;
	channel.remotePubkey = params.pubkey;
	channel.refundTx = params.tx;
	channel.state = 'signedRefund';
	dbWriteSync();

	var result = {
		"signature": sigHex,
	};
	return jrpcServer.ok(req, result);
}

function matchScript(scriptBuf, scriptHashStr)
{
	var script = new Script(scriptBuf);
	return (script.isP2SH() &&
		script.chunks[1].toString() == scriptHashStr);
}

function validCommitTx(tx, msigAddrStr)
{
	var msigAddr = new Address(msigAddrStr);
	var scriptHashStr = msigAddr.payload().toString();

	var match = -1;
	for (var i = 0; i < tx.outs.length; i++) {
		if (matchScript(tx.outs[i].s, scriptHashStr)) {
			match = i;
		}
	}
	if (match < 0) {
		return { result: false };
	}

	var curtime = new Date();
	if (tx.lock_time > curtime.getTime()) {
		return { result: false };
	}

	return { result: true, idx: match };
}

function findTxOutpt(tx, outpt)
{
	var hashStr = outpt.hash.toString();
	for (var i = 0; i < tx.ins.length; i++) {
		var txin = tx.ins[i];
		if ((txin.getOutpointIndex() == outpt.n) &&
		    (txin.getOutpointHash().toString() == hashStr)) {
			return i;
		}
	}

	return -1;
}

function findOutByAddr(tx, pubkey)
{
	var pkh = coinUtil.sha256ripe160(pubkey);
	var pkhStr = pkh.toString();
	for (var i = 0; i < tx.outs.length; i++) {
		var txout = tx.outs[i];
		var script = new Script(txout.s);
		if (script.isPubkeyHash() &&
		    script.chunks[2].toString() == pkhStr) {
			return i;
		}
	}

	return -1;
}

function validFirstPay(channel, ctxInfo, txCommit, txFirstPay,
		       channelKey, remotePubkey)
{
	// ensure txFirstPay is connected to txCommit's matched output
	var outpt = { hash: txCommit.getHash(), n: ctxInfo.idx };
	var inIdx = findTxOutpt(txFirstPay, outpt);
	if (inIdx < 0) {
		console.log("vfp: txoutpt");
		return { result: false };
	}

	var txin = txFirstPay.ins[inIdx];
	if (txin.q > 0xffffff) {
		console.log("vfp: seq");
		return { result: false };
	}

	// load K1
	var k1_pubkeyBuf = new Buffer(channel.remotePubkey, 'hex');
	var k1_pubkey = new KeyModule.Key();
	k1_pubkey.public = k1_pubkeyBuf;
	
	// sig empty-sig p2sh-script
	var scriptSig = new Script(txin.s);
	if (scriptSig.chunks.length != 3) {
		console.log("vfp: ssiglen");
		return { result: false };
	}
	var k1_sig = scriptSig.chunks[0];

	// locate the outputs directed to us, and to the client
	var cliOutIdx = findOutByAddr(txFirstPay, remotePubkey.public);
	var srvOutIdx = findOutByAddr(txFirstPay, channelKey.public);
	if ((cliOutIdx < 0) || (srvOutIdx < 0) || (cliOutIdx == srvOutIdx)) {
		console.log("vfp: outidx");
		console.dir(cliOutIdx);
		console.dir(srvOutIdx);
		return { result: false };
	}
		
	var val_in = coinUtil.valueToBigInt(txCommit.outs[ctxInfo.idx].v);
	var val_cli = coinUtil.valueToBigInt(txFirstPay.outs[cliOutIdx].v);
	var val_srv = coinUtil.valueToBigInt(txFirstPay.outs[srvOutIdx].v);
	var fee = bignum(0);

	var val_out = val_cli.add(val_srv);
	val_out = val_out.add(fee);

	if (val_in.lt(val_out)) {
		console.log("vfp: val i/o");
		return { result: false };
	}

	// check client signature. TODO: update this post-test
	var sigHash = txFirstPay.hashForSignature(scriptPubKey, 0,
						  Transaction.SIGHASH_ALL);
	if (!k1_public.verifySignatureSync(sigHash, k1_sig)) {
		console.log("vfp: cli sig");
		return { result: false };
	}

	return {
		result: true,
		inIdx: inIdx,
		cliOutIdx: cliOutIdx,
		srvOutIdx: srvOutIdx,
		val_in: val_in.toString(),
		val_cli: val_cli.toString(),
		val_srv: val_srv.toString(),
		fee: fee.toString(),
	};
}

function cmdChannelCommit(req)
{
	// load and validate params
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('tx.commit' in params) ||
	    !('tx.firstPayment' in params)) {
		return jrpcServer.err(req, -10, 'missing params');
	}

	var channelId = params["channel.id"];
	var channel = db.channels[channelId];
	if (!channel) {
		return jrpcServer.err(req, -10, 'invalid channel id');
	}
	if (channel.state != 'signedRefund') {
		return jrpcServer.err(req, -12, 'invalid channel state');
	}
	var channelKey = loadChannelKey(channel.id);
	if (!channelKey) {
		return jrpcServer.err(req, -22, 'internal server error');
	}
	var remotePubkey = decodePubkey(channel.remotePubkey);
	if (!remotePubkey) {
		return jrpcServer.err(req, -23, 'internal server error');
	}

	var txCommit = decodeHexTx(params["tx.commit"]);
	if (!txCommit) {
		return jrpcServer.err(req, -15, 'transaction decode failed');
	}

	var txFirstPay = decodeHexTx(params["tx.firstPayment"]);
	if (!txFirstPay) {
		return jrpcServer.err(req, -15, 'transaction 2 decode failed');
	}

	var ctxInfo = validCommitTx(txCommit, channel.msigAddr);
	if (!ctxInfo.result) {
		return jrpcServer.err(req, -31, 'commit tx invalid');
	}

	var ptxInfo = validFirstPay(channel, ctxInfo, txCommit, txFirstPay,
				    channelKey, remotePubkey);
	if (!ptxInfo.result) {
		return jrpcServer.err(req, -31, 'firstPayment tx invalid');
	}

	// FIXME: broadcast txCommit, once validated

	channel.txCommit = params["tx.commit"];
	channel.txFirstPayment = params["tx.firstPayment"];
	channel.txLastPayment = params["tx.firstPayment"];
	channel.inIdx = ptxInfo.inIdx;
	channel.cliOutIdx = ptxInfo.cliOutIdx;
	channel.srvOutIdx = ptxInfo.srvOutIdx;
	channel.val_in = ptxInfo.val_in;
	channel.val_cli = ptxInfo.val_cli;
	channel.val_srv = ptxInfo.val_srv;
	channel.fee = ptxInfo.fee;
	channel.state = 'active';
	dbWriteSync();

	var result = true;
	return jrpcServer.ok(req, result);
}

function updatePayTx(channel, sigRaw, amount)
{
	// load K1
	var k1_pubkeyBuf = new Buffer(channel.remotePubkey, 'hex');
	var k1_pubkey = new KeyModule.Key();
	k1_pubkey.public = k1_pubkeyBuf;

	// move value cli -> srv
	var val_cli = bignum(channel.val_cli);
	val_cli = val_cli.sub(amount);
	var val_srv = bignum(channel.val_srv);
	val_srv = val_srv.add(amount);

	var buf = new Buffer(channel.txLastPayment, 'hex');
	var tx = new Transaction();
	tx.parse(buf);

	var txin = tx.ins[channel.inIdx];

	// update input sequence number
	txin.q++;

	// update signature in scriptSig
	var scriptSig = new Script(txin.s);
	scriptSig.chunks[0] = sigRaw;
	scriptSig.updateBuffer();

	// reduce client's output
	var txout = tx.outs[channel.cliOutIdx];
	txout.v = coinUtil.bigIntToValue(val_cli);

	// increase server's output
	var txout = tx.outs[channel.srvOutIdx];
	txout.v = coinUtil.bigIntToValue(val_srv);

	// check client signature on updated TX. TODO: update this post-test
	var k1_sig = sigRaw;
	var sigHash = tx.hashForSignature(scriptPubKey, 0,
					  Transaction.SIGHASH_ALL);
	if (!k1_pubkey.verifySignatureSync(sigHash, k1_sig)) {
		return false;
	}

	// store updated payment TX
	channel.txLastPayment = buffertools.toHex(tx.serialize());
	channel.val_cli = val_cli.toString();
	channel.val_srv = val_srv.toString();
	dbWriteSync();

	return true;
}

function cmdChannelPay(req)
{
	// load and validate params
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('tx.payment' in params)) {
		return jrpcServer.err(req, -10, 'missing params');
	}

	var channelId = params["channel.id"];
	var channel = db.channels[channelId];
	if (!channel) {
		return jrpcServer.err(req, -10, 'invalid channel id');
	}
	if (channel.state != 'active') {
		return jrpcServer.err(req, -12, 'invalid channel state');
	}

	var txPayment = decodeHexTx(params["tx.payment"]);
	if (!txPayment) {
		return jrpcServer.err(req, -15, 'payment transaction decode failed');
	}
 
	// TODO: FIXME
	if (!true /* check tx.payment is valid */) {
 		return jrpcServer.err(req, -44, 'payment failed');
	}
 
	var result = true;
	return jrpcServer.ok(req, result);
}

function handle_jsonrpc(req)
{
	if (!Array.isArray(req.params) ||
	    (req.params.length != 1) ||
	    (typeof req.params[0] != 'object')) {
		return jrpcServer.err(req, -2, 'invalid params');
	}

	switch (req.method) {
	case "channel.open":
		return cmdChannelOpen(req);
	case "channel.setRefund":
		return cmdChannelSetRefund(req);
	case "channel.commit":
		return cmdChannelCommit(req);
	case "channel.pay":
		return cmdChannelPay(req);

	default:
		return jrpcServer.err(req, -1, 'method not found');
	}
}

function handle_jsonrpc_admin(req)
{
	switch (req.method) {
	case "dump":
		return jrpcServer.ok(req, db);

	case "dumpWallet":
		return jrpcServer.ok(req, wallet.datastore);

	case "stop":
		stop_all();
		return jrpcServer.ok(req, true);
	
	default:
		return jrpcServer.err(req, -1, 'method not found');
	}
}

function start_http()
{
	var opts = {
		key: fs.readFileSync(sslkey_fn),
		cert: fs.readFileSync(sslcert_fn),
		port: cfg.port || 13882,
	};
	httpsrv = jrpcServer.create(opts, handle_jsonrpc, logger, "http");

	opts = {
		key: fs.readFileSync(sslkey_fn),
		cert: fs.readFileSync(sslcert_fn),
		port: cfg.admin_port || 13883,
	};
	admsrv = jrpcServer.create(opts, handle_jsonrpc_admin, logger, "admin");

	rpc = new RpcClient({
		host: cfg.bitcoind_host || '127.0.0.1',
		port: cfg.bitcoind_port || 18332,
		user: cfg.bitcoind_user || 'user',
		pass: cfg.bitcoind_pass || 'pass',
		protocol: cfg.bitcoind_protocol || 'http',
	});

	console.log("Awaiting Payment Channel Connections...\n");
}

function read_db()
{
	if (program.init) {
		db = {
			created: {
				app:		'serverd',
				version:	VERSION,
				time:		timeUtil.curtime(),
			},

			// member properties:
			// created: creation timestamp (== key generation time)
			// state: open, signedRefund, commit, active
			channels: {},
		};

		dbWriteSync();
	} else {
		db = EncFile.readJFileSync(ENC_METHOD, process.env.SERVERD, db_fn);
		wallet.readSync(walletdb_fn, process.env.SERVERD);
		wallet.setNetwork(wallet.datastore.network);
		network = wallet.network;
	}
}

function set_network(netname)
{
	wallet.setNetwork(netname);
	network = wallet.network;
}

function main()
{
	if (!process.env.SERVERD) {
		console.error("SERVERD environment variable must be set to DB passphrase");
		return;
	}

	if (program.livenet) {
		set_network('livenet');
	} else {
		set_network('testnet');
	}

	read_db();

	if (!program.init) {
		start_http();
	}
}

main();

